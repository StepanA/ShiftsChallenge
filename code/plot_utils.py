from matplotlib import pyplot as pltfrom IPython.display import displayimport timebase_context = 'fivethirtyeight'def fast_plot(data, rolling=1,              figsize=(12, 4), new_figure=True,              title=None, label=None,              alpha=0.5, c=None,              plot=True, lw=2,              scatter=True, size=40,              ax=None,              plot_legend=True,              context=base_context):    if rolling > 1:        data = data.rolling(rolling).mean()    if label is None:        label = data.name    if title is None:        title = data.name    if ax is None:        with plt.style.context(context):            if new_figure and ax is None:                plt.figure(figsize=figsize)            # include plot            if plot:                plt.plot(data.index, data, linewidth=lw, label=label, c=c)            # include scatter            if scatter:                if not plot:                    plt.scatter(data.index, data, alpha=alpha, label=label, c=c)                else:                    plt.scatter(data.index, data, alpha=alpha, s=size, c=c)            if new_figure:                plt.title(title)            if plot_legend:                fast_legend();    if ax is not None:        # include plot        if plot:            ax.plot(data.index, data, linewidth=lw, label=label, c=c)        # include scatter        if scatter:            if not plot:                ax.scatter(data.index, data, alpha=alpha, label=label, c=c)            else:                ax.scatter(data.index, data, alpha=alpha, s=size, c=c)        if new_figure:            ax.set_title(title)        if plot_legend:            fast_legend(ax=ax);def fast_hist(data, rolling=1,              bins=30,              figsize=(12, 4), new_figure=True,              title=None, label=None,              alpha=0.5, c=None,              ax=None,              plot_legend=True,              context=base_context):    if rolling > 1:        data = data.rolling(rolling).mean().dropna()    if label is None:        label = data.name    if title is None:        title = data.name    if ax is None:        with plt.style.context(context):            if new_figure:                plt.figure(figsize=figsize)            data.hist(bins=bins, alpha=alpha, label=label, color=c)            if new_figure:                plt.title(title)            if plot_legend:                fast_legend();    if ax is not None:        data.hist(bins=bins, alpha=alpha, label=label, ax=ax, color=c)        if new_figure:            ax.set_title(title)        if plot_legend:            fast_legend(ax=ax)def feature_snapshot(data, figsize=(16, 14), context='fivethirtyeight', title=None):    if title is None:        title = data.name    with plt.style.context(context):        fig, ax = plt.subplots(ncols=2, nrows=4, figsize=figsize)        fast_plot(data, ax=ax[0, 0], plot_legend=False, alpha=1, title='Original data', c='#069AF3')        fast_plot(data.diff(), ax=ax[1, 0], plot_legend=False, alpha=1, title='Diff', c='#069AF3')        fast_plot(data.cumsum(), ax=ax[2, 0], plot_legend=False, alpha=1, title='Cumsum', c='#069AF3')        fast_plot(neg_log_transform(data), ax=ax[3, 0], plot_legend=False, alpha=1, title='Neg Log', c='#069AF3')        fast_hist(data, ax=ax[0, 1], plot_legend=False, alpha=1, title='Original data', c='#069AF3')        fast_hist(data.diff(), ax=ax[1, 1], plot_legend=False, alpha=1, title='Diff', c='#069AF3')        fast_hist(data.cumsum(), ax=ax[2, 1], plot_legend=False, alpha=1, title='Cumsum', c='#069AF3')        fast_hist(neg_log_transform(data), ax=ax[3, 1], plot_legend=False, alpha=1, title='Neg Log', c='#069AF3')        fig.suptitle(title, fontsize=18)        plt.tight_layout()def fast_legend(ncol=3, pos=(0.5, -0.15), fontsize=16, ax=None):    if ax is None:        return plt.legend(loc='upper center', ncol=ncol, bbox_to_anchor=pos, fontsize=fontsize)    else:        return ax.legend(loc='upper center', ncol=ncol, bbox_to_anchor=pos, fontsize=fontsize)def fast_scatter(x, y, rolling=1,                 bins=30,                 figsize=(12, 4), new_figure=True,                 title=None, label=None,                 alpha=0.5, c=None,                 ax=None,                 plot_legend=True,                 context=base_context):    if rolling > 1:        x = x.rolling(rolling).mean()        y = y.rolling(rolling).mean()    if label is None:        # label = str(x.name) + ' ' + str(y.name)        pass    if title is None:        title = str(x.name) + ' ' + str(y.name)    if ax is None:        with plt.style.context(context):            if new_figure:                plt.figure(figsize=figsize)            plt.scatter(x, y, alpha=alpha, label=label, color=c)            plt.xlabel(x.name)            plt.ylabel(y.name)            if new_figure:                plt.title(title)            if plot_legend:                fast_legend();    if ax is not None:        ax.scatter(x, y, alpha=alpha, label=label, color=c)        ax.set_xlabel(x.name)        ax.set_ylabel(y.name)        if new_figure:            ax.set_title(title)        if plot_legend:            fast_legend(ax=ax)def fast_barh(data, figsize=(12, 4), title='', alpha=1, label='', new_figure=True):    with plt.style.context(base_context):        if new_figure:            plt.figure(figsize=figsize)        plt.barh(data.value_counts().index[::-1], data.value_counts().values[::-1], alpha=alpha, label=label)        plt.title(title);def fast_bar(data, figsize=(6, 4), title='', alpha=1, label='', new_figure=True):    with plt.style.context(base_context):        if new_figure:            plt.figure(figsize=figsize)        plt.bar(data.index, data, alpha=alpha, label=label)        plt.title(title);def display_series(data, name=' ', transpose=True):    df = data.to_frame().T if transpose else data.to_frame()    if transpose:        df.index = [name]    else:        df.columns = [name]    display(df)